---
title: "Bluey Text Analysis"
author: "Tyler Otto"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
output: 
  html_document:
    toc: yes
    toc_float:
      collapsed: true
---

## This Episode of Bluey is Called: *Text Analysis*

![](images/blueyfamily.jpeg){fig-align="center"}




```{r message=FALSE, warning=FALSE, include=FALSE}

## libraries

library(tidyverse)
library(rvest)
library(janitor)
library(tidytext)
library(ggimage)
library(gt)
library(gtExtras)
library(ggtext)



```



```{r message=FALSE, warning=FALSE, include=FALSE}

## Pulling In the Episode Data


# Specify the URL
url <- "https://en.wikipedia.org/wiki/List_of_Bluey_episodes"

# Read the HTML content of the webpage
webpage <- read_html(url)

# Extract the tables from the webpage
tables <- html_table(webpage) 

tables <- tables[2:4]

# Since html_table returns a list of data frames, you might need to access the first element
# Assuming you want to combine all tables from the page, you can use bind_rows
combined_table <- bind_rows(tables) %>% 
  janitor::clean_names() %>% 
  filter(is.na(x8)) %>% 
  mutate(
    # Coalesce multiple release date columns into one
    original_release_date = coalesce(
      original_release_date_26, 
      original_release_date_79, 
      original_release_date_138
    )) %>% 
  select(no_overall,
         no_inseries,
         title,
         storyboarded_by_25,
         australian_viewers,
         original_release_date) %>% 
  mutate(original_release_date = str_extract(original_release_date, "\\(\\d{4}-\\d{2}-\\d{2}\\)") %>%
           str_remove_all("\\(|\\)") %>%  # Remove parentheses
           as.Date(format = "%Y-%m-%d")  ) %>% 
  mutate(australian_viewers =  as.numeric(str_extract(australian_viewers, "^[0-9,]+") %>%
           str_replace_all(",", "") 
            )
         )%>%
  mutate(no_inseries = as.numeric(no_inseries)) %>% 
  mutate(title = gsub(" ", "_", title)) %>% 
  mutate(title = str_replace_all(title, '"', "")) %>% 
  mutate(season = cumsum(no_inseries < lag(no_inseries , default = first(no_inseries))) + 1) %>% 
  mutate(title =  str_replace(title, "Magic_Xylophone", "The_Magic_Xylophone"))


```



```{r message=FALSE, warning=FALSE, include=FALSE}
# combined_table <- read_csv("tidy_episodes.csv") %>% 
#   mutate(season = case_when(Episode == 'Bingo_(Episode)' ~ '2',
#                             TRUE ~ Episode))
# 
# # list of episodes
# 
# episode_names <- combined_table %>% 
#   select(Episode) %>% 
#   as.list() %>% 
#   unname()
# 
# episode_names <-  episode_names[[1]]
# 
# addtional_episodes <-  c("Calypso_(Episode)", "Bingo_(Episode)")
# 
# episode_names <-  c(episode_names, addtional_episodes)
# 
# 
# 
# # str(episode_names)
# # str(addtional_episodes)
# 
# 
# script_df <- data.frame(Episode = character(), Character = character(), Dialogue = character())
# 
# # Iterate over each episode name
# for (episode_name in episode_names) {
#   # Construct the URL for the episode
#   url <- paste0("https://blueypedia.fandom.com/wiki/", episode_name, "/Script")
#   
#   tryCatch({
#     # Read the HTML content of the webpage
#     webpage <- read_html(url)
#     
#     # Extract the episode name from the URL
#     episode_name <- gsub(".*/(.*)/Script", "\\1", url)
#     
#     # Extract the script text
#     script_text <- html_text(html_nodes(webpage, "div.mw-parser-output"))
#     
#     # Split the script text into lines
#     script_lines <- strsplit(script_text, "\n")[[1]]
#     
#     # Initialize variables to store character and dialogue
#     characters <- character()
#     dialogues <- character()
#     
#     # Extract characters and dialogues
#     for (line in script_lines) {
#       if (grepl(":", line)) { # If the line contains a colon (indicating a character's dialogue)
#         parts <- strsplit(line, ":", fixed = TRUE)[[1]]
#         character <- trimws(parts[1])
#         dialogue <- trimws(parts[2])
#         
#         # Append character and dialogue to the vectors
#         characters <- c(characters, character)
#         dialogues <- c(dialogues, dialogue)
#       }
#     }
#     
#     # Create a data frame for the current episode
#     episode_df <- data.frame(
#       Episode = rep(episode_name, length(characters)),
#       Character = characters,
#       Dialogue = dialogues
#     )
#     
#     # Remove rows with empty dialogues
#     # episode_df <- episode_df[episode_df$Dialogue != "", ]
#     
#     # Append the current episode's data to the script data frame
#     script_df <- bind_rows(script_df, episode_df)
#   }, error = function(e) {
#     cat("Error processing URL:", url, "\n")
#     cat("Error message:", conditionMessage(e), "\n")
#   })
# }

```







```{r message=FALSE, warning=FALSE, include=FALSE}

## get character images

character_images <- tibble(
  Character = c("Bandit", "Bingo", "Bluey", "Chilli", "Muffin"),
  image_url = c(
    "https://static.wikia.nocookie.net/blueypedia/images/e/e6/Cleanupdad.png/revision/latest?cb=20240219204742",
    "https://static.wikia.nocookie.net/blueypedia/images/d/d3/Bingo_stock_pose.png/revision/latest?cb=20230911045555",
    "https://static.wikia.nocookie.net/blueypedia/images/b/b3/Bluey_stock_pose.png/revision/latest?cb=20230910153710",
    "https://static.wikia.nocookie.net/blueypedia/images/4/4b/Chilli_Profile_-_Season_3%2B_Design.png/revision/latest?cb=20230529193849",
    "https://static.wikia.nocookie.net/blueypedia/images/7/7c/Muffin_1.png/revision/latest?cb=20231114131650"
  )
)

```





```{r message=FALSE, warning=FALSE, include=FALSE}

### Extra Munging

tidy_episodes <- read_csv("tidy_episodes.csv") %>% 
  mutate(Character = str_trim(Character)) %>% 
  mutate(season = case_when(Episode == 'Bingo_(Episode)' ~ '2' ,
                            TRUE ~ as.character(season))
                            )


## top 5 list
top_5_list <-  tidy_episodes %>% 
  count(Character , sort = TRUE) %>% 
  top_n(5) %>% 
  pull(Character)

#more word removal

custom_colors <- c(
  "Bandit" = "blue",
  "Bingo" = "wheat2",
  "Bluey" = "lightblue",
  "Chilli" = "darkorange",
  "Muffin" = "darkgrey"
)


character_images <- tibble(
  Character = c("Bandit", "Bingo", "Bluey", "Chilli", "Muffin"),
  image_url = c(
    "https://static.wikia.nocookie.net/blueypedia/images/e/e6/Cleanupdad.png/revision/latest?cb=20240219204742",
    "https://static.wikia.nocookie.net/blueypedia/images/d/d3/Bingo_stock_pose.png/revision/latest?cb=20230911045555",
    "https://static.wikia.nocookie.net/blueypedia/images/b/b3/Bluey_stock_pose.png/revision/latest?cb=20230910153710",
    "https://static.wikia.nocookie.net/blueypedia/images/4/4b/Chilli_Profile_-_Season_3%2B_Design.png/revision/latest?cb=20230529193849",
    "https://static.wikia.nocookie.net/blueypedia/images/7/7c/Muffin_1.png/revision/latest?cb=20231114131650"
  )
)


```

## Most Words Spoken (No Stop Words Removed)

```{r echo=FALSE, message=FALSE, warning=FALSE}

mystopwords <- tibble(word = c("hey",
                            'called',
                            'episode',
                            'giggles',
                            'offscreen',
                            "yeah",
                            'ah',
                            'uh',
                            'um',
                            'doo',
                            'voiceover',
                            'bingo',
                            'bluey',
                            'dad',
                            'mum',
                            'muffin',
                            'ooh',
                            'kids',
                            'choop'))


data_plot <- tidy_episodes %>%  
  filter(Character %in% top_5_list) %>% 
  # anti_join(stop_words) %>%  
  # anti_join(mystopwords) %>% 
  count(Character, sort = TRUE) %>% 
  left_join(character_images, by = "Character") %>% 
  mutate(Character = fct_reorder(Character, n))  # Order by count

Word_Count_per_Character <- ggplot(data_plot, aes(x = Character, y = n, fill = Character)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  scale_fill_manual(values = custom_colors) +
  geom_image(aes(image = image_url), size = 0.15, y = -max(data_plot$n) * -0.1) +  # Adjust size and position
  theme_minimal() +
  labs(title = "Word Count per Character",
       x = "Character",
       y = "Word Count") +
  scale_y_continuous(labels = scales::comma) +
  theme(# Remove default text labels
        axis.ticks.x = element_blank()) +
  theme(panel.grid.major = element_blank(),  # Remove major grid lines
        panel.grid.minor = element_blank(),
        strip.text = element_markdown())

Word_Count_per_Character

ggsave("C:/Users/tyler/OneDrive/Desktop/blueyanalytics/Word_Count_per_Character.png", Word_Count_per_Character, width = 10, height = 6, dpi = 300)


```





## Top Words Used by Each Character

```{r echo=FALSE, message=FALSE, warning=FALSE}

mystopwords <- tibble(word = c("hey",
                            'called',
                            'episode',
                            'giggles',
                            'offscreen',
                            "yeah",
                            'ah',
                            'uh',
                            'um',
                            'doo',
                            'voiceover',
                            # 'bingo',
                            # 'bluey',
                            # 'dad',
                            # 'mum',
                            # 'muffin',
                            'ooh',
                            'kids',
                            'choop'))


Top_Words_Used_by_Each_Character_All <- tidy_episodes %>%  
  filter(Character %in% top_5_list) %>% 
  anti_join(stop_words) %>%  
  anti_join(mystopwords) %>% 
  count(Character, word, sort = TRUE) %>%  
  group_by(Character) %>%
  slice_max(n, n = 5) %>%  
  ungroup() %>%
  mutate(Character = factor(Character, levels = top_5_list)) %>%  
  ggplot(aes(x = reorder_within(word, n, Character), y = n, fill = Character)) +  
  geom_col(show.legend = FALSE) +
  facet_wrap(~ Character, scales = "free_y", 
             labeller = labeller(Character = function(x) paste0("**", x, "**"))) +  # Bold the facet labels
  coord_flip() +
  scale_x_reordered() + 
  scale_fill_manual(values = custom_colors) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),  # Remove major grid lines
        panel.grid.minor = element_blank(),
        strip.text = element_markdown()) +  # Apply markdown for bolding
  labs(title = "Top Words Used by Each Character (All Words)", x = "", y = "Word Count") +
  geom_image(data = character_images, aes(x = 1, y = 50, image = image_url), 
             size = 0.3, inherit.aes = FALSE)  # Adjust y position manually

Top_Words_Used_by_Each_Character_All

ggsave("C:/Users/tyler/OneDrive/Desktop/blueyanalytics/Top_Words_Used_by_Each_Character_All.png", Top_Words_Used_by_Each_Character_All, width = 10, height = 6, dpi = 300)

```
## Top Words Used by Each Character (Remove Character Names)

```{r echo=FALSE, message=FALSE, warning=FALSE}


mystopwords <- tibble(word = c("hey",
                            'called',
                            'episode',
                            'giggles',
                            'offscreen',
                            "yeah",
                            'ah',
                            'uh',
                            'um',
                            'doo',
                            'voiceover',
                            'bingo',
                            'bluey',
                            'dad',
                            'mum',
                            'muffin',
                            'ooh',
                            'kids',
                            'choop'))


Top_Words_Used_by_Each_Character <- tidy_episodes %>%  
  filter(Character %in% top_5_list) %>% 
  left_join(character_images, by = "Character") %>% 
  anti_join(stop_words) %>%  
  anti_join(mystopwords) %>% 
  count(Character, word, sort = TRUE) %>%  
  group_by(Character) %>%
  slice_max(n, n = 5) %>%  
  ungroup() %>%
  mutate(Character = factor(Character, levels = top_5_list)) %>%  
  ggplot(aes(x = reorder_within(word, n, Character), y = n, fill = Character)) +  
  geom_col(show.legend = FALSE) +
  facet_wrap(~ Character, scales = "free_y", 
             labeller = labeller(Character = function(x) paste0("**", x, "**"))) +  # Bold the facet labels
  coord_flip() +
  scale_x_reordered() + 
  scale_color_manual(values = custom_colors) +
  theme_minimal() +
  scale_fill_manual(values = custom_colors) +
  theme(panel.grid.major = element_blank(),  # Remove major grid lines
        panel.grid.minor = element_blank(),
        strip.text = element_markdown()) +  # Apply markdown for bolding
  labs(title = "Top Words Used by Each Character", x = "", y = "Word Count") +
  geom_image(data = character_images, aes(x = 1, y = 40, image = image_url), 
             size = 0.3, inherit.aes = FALSE)  # Adjust y position manually

Top_Words_Used_by_Each_Character

ggsave("C:/Users/tyler/OneDrive/Desktop/blueyanalytics/Top_Words_Used_by_Each_Character.png", Top_Words_Used_by_Each_Character, width = 10, height = 6, dpi = 300)
```


```{r message=FALSE, warning=FALSE, include=FALSE}
library(syuzhet)

sentiments <- get_sentiment(tidy_episodes$word, method = "afinn")

tidy_episodes$sentiment <- sentiments

sentiment_df <- tidy_episodes %>% 
  anti_join(stop_words) %>% 
  anti_join(mystopwords) %>% 
  mutate(Character = gsub("^\\(.*?\\)\\s*", "", Character),
         Character = str_replace_all(Character, "[^A-Za-z0-9\\s]", ""))

name_mapping <- c("Chili" = "Chilli", "Bluye" = "Bluey")

correct_names <- function(names_vector, mapping) {
  corrected_names <-
    ifelse(names_vector %in%
             names(mapping),
           mapping[names_vector], names_vector)
  return(corrected_names)
}

sentiment_df$Character <- correct_names(sentiment_df$Character, name_mapping)

sentiment_summary <- sentiment_df %>%
  mutate(Character = stringr::str_to_title(Character)) %>%
  group_by(Character, season) %>%
  summarize(avg_sentiment = mean(sentiment),
            word_count = n_distinct(word)) %>% 
  filter(grepl("^\\w+$", Character)) %>% 
  filter(Character %in% c("Bluey", "Bingo","Bandit","Chilli","Muffin"))

sentiment_summary_epi_num <- sentiment_df %>%
  left_join(combined_table, by = c('Episode'  = 'title')) %>% 
  mutate(Character = stringr::str_to_title(Character),
         no_overall = as.numeric(no_overall)) %>%
  group_by(Character, no_overall) %>%
  summarize(avg_sentiment = mean(sentiment),
            word_count = n_distinct(word)) %>% 
  filter(grepl("^\\w+$", Character)) %>% 
  filter(Character %in% c("Bluey", "Bingo","Bandit","Chilli","Muffin"))



```

## Character Sentiment By Season

```{r echo=FALSE, message=FALSE, warning=FALSE}

mystopwords <- tibble(word = c("hey",
                            'called',
                            'episode',
                            'giggles',
                            'offscreen',
                            "yeah",
                            'ah',
                            'uh',
                            'um',
                            'doo',
                            'voiceover',
                            # 'bingo',
                            # 'bluey',
                            # 'dad',
                            # 'mum',
                            # 'muffin',
                            'ooh',
                            'kids',
                            'choop'))



library(ggplot2)
library(dplyr)
library(ggimage)

sentiment_summary_with_images <- sentiment_summary %>%
  left_join(character_images, by = "Character")


# Create the plot with manually set line colors and images at the end
Character_Sentiment_by_Season <- ggplot(sentiment_summary_with_images, aes(x = season, y = avg_sentiment, color = Character, group = Character)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  geom_image(
    aes(x = season, y = avg_sentiment, image = image_url),
    data = sentiment_summary_with_images %>%
      group_by(Character) %>%
      slice_tail(n = 1), # Get only the last point for each character
    size = 0.1, 
    inherit.aes = FALSE,  # Do not inherit aesthetics from the main plot
    # position = position_nudge(x = 0.1, y = 0.1)  # Add slight offset to avoid overlap
  ) +
  scale_color_manual(values = custom_colors) +  # Apply custom colors
  theme_minimal() +
  labs(title = "Character Sentiment by Season",
       x = "Season", 
       y = "Average Sentiment",
       color = "Character") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),  # Remove major grid lines
        panel.grid.minor = element_blank(),
        strip.text = element_markdown())

Character_Sentiment_by_Season

ggsave("C:/Users/tyler/OneDrive/Desktop/blueyanalytics/Character_Sentiment_by_Season.png", Character_Sentiment_by_Season, width = 10, height = 6, dpi = 300)

```

```{r message=FALSE, warning=FALSE, include=FALSE}

ggplot(sentiment_summary, aes(x = factor(season), y = Character, fill = avg_sentiment)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "red", high = "darkgreen", mid = "white", midpoint = 0, 
                       limit = c(min(sentiment_summary$avg_sentiment), max(sentiment_summary$avg_sentiment)),
                       space = "Lab", name="Sentiment") +
  theme_minimal() +
  labs(title = "Character Sentiment Heatmap by Season", 
       x = "Season", 
       y = "Character")


```



```{r message=FALSE, warning=FALSE, include=FALSE}



```
