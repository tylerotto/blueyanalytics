---
title: "Bluey Text Analysis"
date: '`r format(Sys.Date(), "%B %d, %Y")`'
author: "Tyler Otto"
format:
  html: 
    grid:
      body-width: 1000px
engine: knitr
knitr:
  opts_chunk: 
    R.options:
      width: 900
theme: zephyr
---

## This Episode of Bluey is Called: *Text Analysis*

A big thanks to the tidytext package and their documentation for the inspiration to do this project. <https://www.tidytextmining.com/tidytext.html>

As a parent of 3 young kids, the show "Bluey", has a special place in my family's heart. Each episode is only 7 minutes, yet manages to tell a complete, engaging story with heartwarming moments. It blends heartwarming storytelling, realistic parenting, and humor that appeals to both kids and adults (not to mention the fantastic soundtrack). It might sound like hyperbole, but I'd be a worse parent without this show. I'll share some great articles that summarise the show better than I will.

-   <https://www.upworthy.com/what-makes-bluey-such-a-great-tv-show-ex1>

-   <https://www.vulture.com/article/bluey-best-kids-tv-show.html>

This project has been on my list to do for a while now and I wanted to dig into the character's dialogue and practice my skills in text analysis.

## List of Libraries Used and What They Do

![](images/blueyfamily.jpeg){fig-align="center" width="500"}

```{r echo=TRUE, message=FALSE, warning=FALSE}

library(tidyverse) ## data wrangling and visualization
library(rvest) ## webscraping 
library(janitor) ## the most underrated package
library(tidytext) ## tokenize your data
library(ggimage) ## being extra in ggplot
library(gt) ## makes beautiful tables
library(gtExtras) ## makes beautiful tables
library(ggtext) ## being extra in ggplot
library(syuzhet) ## sentiment analysis package

```

```{r message=FALSE, warning=FALSE, include=FALSE}

## Pulling In the Episode Data


# Specify the URL
url <- "https://en.wikipedia.org/wiki/List_of_Bluey_episodes"

# Read the HTML content of the webpage
webpage <- read_html(url)

# Extract the tables from the webpage
tables <- html_table(webpage) 

tables <- tables[2:4]

# Since html_table returns a list of data frames, you might need to access the first element
# Assuming you want to combine all tables from the page, you can use bind_rows
combined_table <- bind_rows(tables) %>% 
  janitor::clean_names() %>% 
  filter(is.na(x8)) %>% 
  mutate(
    # Coalesce multiple release date columns into one
    original_release_date = coalesce(
      original_release_date_26, 
      original_release_date_79, 
      original_release_date_138
    )) %>% 
  select(no_overall,
         no_inseries,
         title,
         storyboarded_by_25,
         australian_viewers,
         original_release_date) %>% 
  mutate(original_release_date = str_extract(original_release_date, "\\(\\d{4}-\\d{2}-\\d{2}\\)") %>%
           str_remove_all("\\(|\\)") %>%  # Remove parentheses
           as.Date(format = "%Y-%m-%d")  ) %>% 
  mutate(australian_viewers =  as.numeric(str_extract(australian_viewers, "^[0-9,]+") %>%
           str_replace_all(",", "") 
            )
         )%>%
  mutate(no_inseries = as.numeric(no_inseries)) %>% 
  mutate(title = gsub(" ", "_", title)) %>% 
  mutate(title = str_replace_all(title, '"', "")) %>% 
  mutate(season = cumsum(no_inseries < lag(no_inseries , default = first(no_inseries))) + 1) %>% 
  mutate(title =  str_replace(title, "Magic_Xylophone", "The_Magic_Xylophone"))


```

```{r message=FALSE, warning=FALSE, include=FALSE}
# combined_table <- read_csv("tidy_episodes.csv") %>% 
#   mutate(season = case_when(Episode == 'Bingo_(Episode)' ~ '2',
#                             TRUE ~ Episode))
# 
# # list of episodes
# 
# episode_names <- combined_table %>% 
#   select(Episode) %>% 
#   as.list() %>% 
#   unname()
# 
# episode_names <-  episode_names[[1]]
# 
# addtional_episodes <-  c("Calypso_(Episode)", "Bingo_(Episode)")
# 
# episode_names <-  c(episode_names, addtional_episodes)
# 
# 
# 
# # str(episode_names)
# # str(addtional_episodes)
# 
# 
# script_df <- data.frame(Episode = character(), Character = character(), Dialogue = character())
# 
# # Iterate over each episode name
# for (episode_name in episode_names) {
#   # Construct the URL for the episode
#   url <- paste0("https://blueypedia.fandom.com/wiki/", episode_name, "/Script")
#   
#   tryCatch({
#     # Read the HTML content of the webpage
#     webpage <- read_html(url)
#     
#     # Extract the episode name from the URL
#     episode_name <- gsub(".*/(.*)/Script", "\\1", url)
#     
#     # Extract the script text
#     script_text <- html_text(html_nodes(webpage, "div.mw-parser-output"))
#     
#     # Split the script text into lines
#     script_lines <- strsplit(script_text, "\n")[[1]]
#     
#     # Initialize variables to store character and dialogue
#     characters <- character()
#     dialogues <- character()
#     
#     # Extract characters and dialogues
#     for (line in script_lines) {
#       if (grepl(":", line)) { # If the line contains a colon (indicating a character's dialogue)
#         parts <- strsplit(line, ":", fixed = TRUE)[[1]]
#         character <- trimws(parts[1])
#         dialogue <- trimws(parts[2])
#         
#         # Append character and dialogue to the vectors
#         characters <- c(characters, character)
#         dialogues <- c(dialogues, dialogue)
#       }
#     }
#     
#     # Create a data frame for the current episode
#     episode_df <- data.frame(
#       Episode = rep(episode_name, length(characters)),
#       Character = characters,
#       Dialogue = dialogues
#     )
#     
#     # Remove rows with empty dialogues
#     # episode_df <- episode_df[episode_df$Dialogue != "", ]
#     
#     # Append the current episode's data to the script data frame
#     script_df <- bind_rows(script_df, episode_df)
#   }, error = function(e) {
#     cat("Error processing URL:", url, "\n")
#     cat("Error message:", conditionMessage(e), "\n")
#   })
# }

```

```{r message=FALSE, warning=FALSE, include=FALSE}

## get character images

character_images <- tibble(
  Character = c("Bandit", "Bingo", "Bluey", "Chilli", "Muffin"),
  image_url = c(
    "https://static.wikia.nocookie.net/blueypedia/images/e/e6/Cleanupdad.png/revision/latest?cb=20240219204742",
    "https://static.wikia.nocookie.net/blueypedia/images/d/d3/Bingo_stock_pose.png/revision/latest?cb=20230911045555",
    "https://static.wikia.nocookie.net/blueypedia/images/b/b3/Bluey_stock_pose.png/revision/latest?cb=20230910153710",
    "https://static.wikia.nocookie.net/blueypedia/images/4/4b/Chilli_Profile_-_Season_3%2B_Design.png/revision/latest?cb=20230529193849",
    "https://static.wikia.nocookie.net/blueypedia/images/7/7c/Muffin_1.png/revision/latest?cb=20231114131650"
  )
)

```

```{r message=FALSE, warning=FALSE, include=FALSE, fig.width = 8}

### Extra Munging

tidy_episodes <- read_csv("tidy_episodes.csv") %>% 
  mutate(Character = str_trim(Character)) %>% 
  mutate(season = case_when(Episode == 'Bingo_(Episode)' ~ '2' ,
                            TRUE ~ as.character(season))
                            )


## top 5 list
top_5_list <-  tidy_episodes %>% 
  count(Character , sort = TRUE) %>% 
  top_n(5) %>% 
  pull(Character)

#more word removal

custom_colors <- c(
  "Bandit" = "blue",
  "Bingo" = "wheat2",
  "Bluey" = "lightblue",
  "Chilli" = "darkorange",
  "Muffin" = "darkgrey"
)


character_images <- tibble(
  Character = c("Bandit", "Bingo", "Bluey", "Chilli", "Muffin"),
  image_url = c(
    "https://static.wikia.nocookie.net/blueypedia/images/e/e6/Cleanupdad.png/revision/latest?cb=20240219204742",
    "https://static.wikia.nocookie.net/blueypedia/images/d/d3/Bingo_stock_pose.png/revision/latest?cb=20230911045555",
    "https://static.wikia.nocookie.net/blueypedia/images/b/b3/Bluey_stock_pose.png/revision/latest?cb=20230910153710",
    "https://static.wikia.nocookie.net/blueypedia/images/4/4b/Chilli_Profile_-_Season_3%2B_Design.png/revision/latest?cb=20230529193849",
    "https://static.wikia.nocookie.net/blueypedia/images/7/7c/Muffin_1.png/revision/latest?cb=20231114131650"
  )
)


```

## Result from Rvest Web Scraping

We finally have where reach row defines every word spoken in Bluey, by season and character. Fun table search functionality in \*reactable\* below. For example, "What what the episode Muffin says 'Coconuts have water in them!', search for coconuts and see!

```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width = 8}
library(reactable)
## https://en.wikipedia.org/wiki/List_of_Bluey_episodes

## https://blueypedia.fandom.com/wiki/The_Magic_Xylophone/Script

gt_table <- gt(tidy_episodes) %>%
  tab_header(title = "Bluey Script - Word Tokenization")  # Add a title

# Convert gt table to a paginated reactable
reactable(
  tidy_episodes,
  pagination = TRUE,  # Enable pagination
  defaultPageSize = 5,  # Set number of rows per page
  searchable = TRUE,  # Add search box
  bordered = TRUE,  # Add borders
  highlight = TRUE   # Highlight rows on hover
)
```

## Most Words Spoken (No Stop Words Removed)

Some quick analysis on the raw data shows that, to no one's surprise, that Bluey leads the way in words spoken followed by her dad and sister.

```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width = 8}

mystopwords <- tibble(word = c("hey",
                            'called',
                            'episode',
                            'giggles',
                            'offscreen',
                            "yeah",
                            'ah',
                            'uh',
                            'um',
                            'doo',
                            'voiceover',
                            'bingo',
                            'bluey',
                            'dad',
                            'mum',
                            'muffin',
                            'ooh',
                            'kids',
                            'choop'))


data_plot <- tidy_episodes %>%  
  filter(Character %in% top_5_list) %>% 
  # anti_join(stop_words) %>%  
  # anti_join(mystopwords) %>% 
  count(Character, sort = TRUE) %>% 
  left_join(character_images, by = "Character") %>% 
  mutate(Character = fct_reorder(Character, n))  # Order by count

Word_Count_per_Character <- ggplot(data_plot, aes(x = Character, y = n, fill = Character)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  scale_fill_manual(values = custom_colors) +
  geom_image(aes(image = image_url), size = 0.15, y = -max(data_plot$n) * -0.1) +  # Adjust size and position
  theme_minimal() +
  labs(title = "Word Count per Character",
       x = "Character",
       y = "Word Count") +
  scale_y_continuous(labels = scales::comma) +
  theme(# Remove default text labels
        axis.ticks.x = element_blank()) +
  theme(panel.grid.major = element_blank(),  # Remove major grid lines
        panel.grid.minor = element_blank(),
        strip.text = element_markdown())

Word_Count_per_Character

ggsave("C:/Users/tyler/OneDrive/Desktop/blueyanalytics/Word_Count_per_Character.png", Word_Count_per_Character, width = 10, height = 6, dpi = 300)


```

## Ranked Bump Chart by Character and Season

Awesome to see a proxy of screen time through the word counts. Pat (Lucky's dad) makes a huge leap in season 3 where he gets to play cricket, host birthday parties, and watch rugby with his family. The general trend shows that the kids get less lines as the seasons progress and the parents lines grow.

```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width = 10, fig.height=8}

custom_colors_all <- c(
  "Bandit" = "blue",
  "Bingo" = "wheat2",
  "Bluey" = "lightblue",
  "Chilli" = "darkorange",
  "Muffin" = "darkgrey",
  "Indy" = "#F2A7C4",  # Indy - Light pinkish-red
  "Mackenzie" = "#000000",  # Mackenzie - Black and white (border collie)
  "Chloe" = "#D1C8B0",  # Chloe - White with black spots (Dalmatian)
  "Rusty" = "#6B4C3B",  # Rusty - Brown
  "Pat" = "#5C2F1E",  # Pat - Dark brown
  "Stripe" = "#4C4B87",  # Stripe - Dark purple
  "Jack" = "#4A8E0B"   # Jack - Dark green
)


top_n_list <-  tidy_episodes %>% 
  count(Character , sort = TRUE) %>% 
  top_n(12) %>% 
  pull(Character)

tidy_episodes_count <- tidy_episodes %>%  
  filter(Character %in% top_n_list) %>%
  count(Character, season, sort = TRUE) %>% 
  left_join(character_images, by = "Character") %>% 
  group_by(season) %>%  # Group by season
  mutate(rank = as.integer(rank(-n))) %>%  # Create a non-integer rank based on count, reversed
  ungroup() 


library(ggrepel)

# Filter for the last data point of each character
last_points <- tidy_episodes_count %>%
  group_by(Character) %>%
  filter(season == max(season)) %>%
  ungroup()

Ranked_Bump_Chart <- ggplot(tidy_episodes_count,
                            aes(x = season,
                                y = rank, group = Character, color = Character)) +
  geom_line(size = 1.5) + 
  geom_point(size = 3) +
  geom_text_repel(
    data = last_points, 
    aes(label = Character), 
    color = "black", 
    vjust = -0.5, 
    box.padding = 0.5,  # Adjust label distance from points
    force_pull = 0.5,   # Prevent text overlap
    point.padding = 0.5  # Adjust point padding to space out the labels
  ) +
  scale_y_reverse() +  # Reverse the y-axis to show higher ranks at the top
  theme_minimal() +
  scale_color_manual(values = custom_colors_all) +  # Apply custom colors to the lines and points
  labs(title = "Ranked Bump Chart by Character and Season",
       x = "Season", y = "Rank") +
  theme(axis.text.x = element_text( hjust = 1, size =14),
        axis.text.y = element_blank(),
        panel.grid.major = element_blank(),  # Remove major grid lines
        panel.grid.minor = element_blank(),
        legend.position = "none"
        )  # Remove y-axis labels

Ranked_Bump_Chart

ggsave("C:/Users/tyler/OneDrive/Desktop/blueyanalytics/Ranked_Bump_Chart.png", Ranked_Bump_Chart, width = 10, height = 6, dpi = 300)


```

## Top Words Used by Each Character

It's a great feeling with data corroborates your guess. If I had to guess Bingo and Bluey's top words it would be each other first and then their dad and mum, and behold!\
\
Classic bossy muffin with a top word of 'stop'.

```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width = 8}

mystopwords <- tibble(word = c("hey",
                            'called',
                            'episode',
                            'giggles',
                            'offscreen',
                            "yeah",
                            'ah',
                            'uh',
                            'um',
                            'doo',
                            'voiceover',
                            # 'bingo',
                            # 'bluey',
                            # 'dad',
                            # 'mum',
                            # 'muffin',
                            'ooh',
                            'kids',
                            'choop'))


Top_Words_Used_by_Each_Character_All <- tidy_episodes %>%  
  filter(Character %in% top_5_list) %>% 
  anti_join(stop_words) %>%  
  anti_join(mystopwords) %>% 
  count(Character, word, sort = TRUE) %>%  
  group_by(Character) %>%
  slice_max(n, n = 5) %>%  
  ungroup() %>%
  mutate(Character = factor(Character, levels = top_5_list)) %>%  
  ggplot(aes(x = reorder_within(word, n, Character), y = n, fill = Character)) +  
  geom_col(show.legend = FALSE) +
  facet_wrap(~ Character, scales = "free_y", 
             labeller = labeller(Character = function(x) paste0("**", x, "**"))) +  # Bold the facet labels
  coord_flip() +
  scale_x_reordered() + 
  scale_fill_manual(values = custom_colors) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),  # Remove major grid lines
        panel.grid.minor = element_blank(),
        strip.text = element_markdown()) +  # Apply markdown for bolding
  labs(title = "Top Words Used by Each Character (All Words)", x = "", y = "Word Count") +
  geom_image(data = character_images, aes(x = 1, y = 50, image = image_url), 
             size = 0.3, inherit.aes = FALSE)  # Adjust y position manually

Top_Words_Used_by_Each_Character_All

ggsave("C:/Users/tyler/OneDrive/Desktop/blueyanalytics/Top_Words_Used_by_Each_Character_All.png", Top_Words_Used_by_Each_Character_All, width = 10, height = 6, dpi = 300)

```

## Top Words Used by Each Character (Remove Character Names)

I'm going to remove character names, a few more stop words, words like 'episode' and 'offscreen' for descriptions that got caught in the script and see if we can gather more personality.\
\
Also, is that the characters in the plot - for real life?! I had some fun with 'geom_image' to put the characters in the plot. Super cool.

```{r echo=FALSE, message=FALSE, warning=FALSE,fig.width = 8}


mystopwords <- tibble(word = c("hey",
                            'called',
                            'episode',
                            'giggles',
                            'offscreen',
                            "yeah",
                            'ah',
                            'uh',
                            'um',
                            'doo',
                            'voiceover',
                            'bingo',
                            'bluey',
                            'dad',
                            'mum',
                            'muffin',
                            'ooh',
                            'kids',
                            'choop'))


Top_Words_Used_by_Each_Character <- tidy_episodes %>%  
  filter(Character %in% top_5_list) %>% 
  left_join(character_images, by = "Character") %>% 
  anti_join(stop_words) %>%  
  anti_join(mystopwords) %>% 
  count(Character, word, sort = TRUE) %>%  
  group_by(Character) %>%
  slice_max(n, n = 5) %>%  
  ungroup() %>%
  mutate(Character = factor(Character, levels = top_5_list)) %>%  
  ggplot(aes(x = reorder_within(word, n, Character), y = n, fill = Character)) +  
  geom_col(show.legend = FALSE) +
  facet_wrap(~ Character, scales = "free_y", 
             labeller = labeller(Character = function(x) paste0("**", x, "**"))) +  # Bold the facet labels
  coord_flip() +
  scale_x_reordered() + 
  scale_color_manual(values = custom_colors) +
  theme_minimal() +
  scale_fill_manual(values = custom_colors) +
  theme(panel.grid.major = element_blank(),  # Remove major grid lines
        panel.grid.minor = element_blank(),
        strip.text = element_markdown()) +  # Apply markdown for bolding
  labs(title = "Top Words Used by Each Character", x = "", y = "Word Count") +
  geom_image(data = character_images, aes(x = 1, y = 40, image = image_url), 
             size = 0.3, inherit.aes = FALSE)  # Adjust y position manually

Top_Words_Used_by_Each_Character

ggsave("C:/Users/tyler/OneDrive/Desktop/blueyanalytics/Top_Words_Used_by_Each_Character.png", Top_Words_Used_by_Each_Character, width = 10, height = 6, dpi = 300)
```

```{r message=FALSE, warning=FALSE, include=FALSE}
library(syuzhet)

sentiments <- get_sentiment(tidy_episodes$word, method = "afinn")

tidy_episodes$sentiment <- sentiments

sentiment_df <- tidy_episodes %>% 
  anti_join(stop_words) %>% 
  anti_join(mystopwords) %>% 
  mutate(Character = gsub("^\\(.*?\\)\\s*", "", Character),
         Character = str_replace_all(Character, "[^A-Za-z0-9\\s]", ""))

name_mapping <- c("Chili" = "Chilli", "Bluye" = "Bluey")

correct_names <- function(names_vector, mapping) {
  corrected_names <-
    ifelse(names_vector %in%
             names(mapping),
           mapping[names_vector], names_vector)
  return(corrected_names)
}

sentiment_df$Character <- correct_names(sentiment_df$Character, name_mapping)

sentiment_summary <- sentiment_df %>%
  mutate(Character = stringr::str_to_title(Character)) %>%
  group_by(Character, season) %>%
  summarize(avg_sentiment = mean(sentiment),
            word_count = n_distinct(word)) %>% 
  filter(grepl("^\\w+$", Character)) %>% 
  filter(Character %in% c("Bluey", "Bingo","Bandit","Chilli","Muffin"))

sentiment_summary_epi_num <- sentiment_df %>%
  left_join(combined_table, by = c('Episode'  = 'title')) %>% 
  mutate(Character = stringr::str_to_title(Character),
         no_overall = as.numeric(no_overall)) %>%
  group_by(Character, no_overall) %>%
  summarize(avg_sentiment = mean(sentiment),
            word_count = n_distinct(word)) %>% 
  filter(grepl("^\\w+$", Character)) %>% 
  filter(Character %in% c("Bluey", "Bingo","Bandit","Chilli","Muffin"))



```

## Character Sentiment By Season

Finally, let's assign positive or negative values (some smaller or bigger than others) to each word spoken. We do this by importing the AFINN lexicon (<http://corpustext.com/reference/sentiment_afinn.html>). For example, amazing gets a score of +4 and bad gets a score of -3.

We get to see the young characters of Bingo and Muffin grow and mature in their positive sentiment scores in season 3. We also don't get much character development from Chilli (Mum) in season 1 (more happy go lucky), but in season 2 and 3 we get to see her past struggles as a parent (still overall positive).

```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width = 10, fig.height=8}

mystopwords <- tibble(word = c("hey",
                            'called',
                            'episode',
                            'giggles',
                            'offscreen',
                            "yeah",
                            'ah',
                            'uh',
                            'um',
                            'doo',
                            'voiceover',
                            # 'bingo',
                            # 'bluey',
                            # 'dad',
                            # 'mum',
                            # 'muffin',
                            'ooh',
                            'kids',
                            'choop'))



library(ggplot2)
library(dplyr)
library(ggimage)

sentiment_summary_with_images <- sentiment_summary %>%
  left_join(character_images, by = "Character")


# Create the plot with manually set line colors and images at the end
Character_Sentiment_by_Season <- ggplot(sentiment_summary_with_images, aes(x = season, y = avg_sentiment, color = Character, group = Character)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  geom_image(
    aes(x = season, y = avg_sentiment, image = image_url),
    data = sentiment_summary_with_images %>%
      group_by(Character) %>%
      slice_tail(n = 1), # Get only the last point for each character
    size = 0.05, 
    inherit.aes = FALSE,  # Do not inherit aesthetics from the main plot
    # position = position_nudge(x = 0.1, y = 0.1)  # Add slight offset to avoid overlap
  ) +
  scale_color_manual(values = custom_colors) +  # Apply custom colors
  theme_minimal() +
  labs(title = "Character Sentiment by Season",
       x = "Season", 
       y = "Average Sentiment",
       color = "Character") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),  # Remove major grid lines
        panel.grid.minor = element_blank(),
        strip.text = element_markdown())

Character_Sentiment_by_Season

ggsave("C:/Users/tyler/OneDrive/Desktop/blueyanalytics/Character_Sentiment_by_Season.png", Character_Sentiment_by_Season, width = 10, height = 6, dpi = 300)

```

```{r message=FALSE, warning=FALSE, include=FALSE, fig.width = 8}


```

```{r message=FALSE, warning=FALSE, include=FALSE}



```
